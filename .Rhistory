"S","S","S","S","P","P","P","P","T","T","T","T","A","A","A","A",
"Y","Y","STOP","STOP","H","H","Q","Q","N","N","K","K","D","D","E","E",
"C","C","STOP","W","R","R","R","R","S","S","R","R","G","G","G","G"), 64, 2)
codons <- ""
result <- ""
len_rnastr <- nchar(translate_rnastr)     #length of sample dataset
num_of_codons <- len_rnastr/3
#If-else for checking the length of RNA sequence
if(len_rnastr %% 3 != 0){
print("RNA sequence isn't a multiple of 3.")                 #Prints if sequence is length of sequence is not divisible by 3
} else {                                                        #Proceed here otherwise
start <- seq(from=1, by=3, len_rnastr)        #for sequencing of the rna string; increments by 3
print(start)
for(i in 1:num_of_codons){
# Get the codon from RNA Sequence
codons[i] <- substring(translate_rnastr, start[i], start[i]+2)
#Get the protein that corresponds to the codon
result[i] <- rna_codon_table[rna_codon_table[,1] == codons[[i]] , 2]
#If it is a STOP codon, do not print
if (result[i] == "STOP"){
break
}
protein_str <- c(paste(result, collapse=""))
}
#Print protein string
print(protein_str)
}
translate_rnastr <- c("AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA")
#RNA Codon Table [64:2]
rna_codon_table <- matrix(
c("UUU","UUC","UUA","UUG","CUU","CUC","CUA","CUG","AUU","AUC","AUA","AUG","GUU","GUC","GUA","GUG",
"UCU","UCC","UCA","UCG","CCU","CCC","CCA","CCG","ACU","ACC","ACA","ACG","GCU","GCC","GCA","GCG",
"UAU","UAC","UAA","UAG","CAU","CAC","CAA","CAG","AAU","AAC","AAA","AAG","GAU","GAC","GAA","GAG",
"UGU","UGC","UGA","UGG","CGU","CGC","CGA","CGG","AGU","AGC","AGA","AGG","GGU","GGC","GGA","GGG",
"F","F","L","L","L","L","L","L","I","I","I","M","V","V","V","V",
"S","S","S","S","P","P","P","P","T","T","T","T","A","A","A","A",
"Y","Y","STOP","STOP","H","H","Q","Q","N","N","K","K","D","D","E","E",
"C","C","STOP","W","R","R","R","R","S","S","R","R","G","G","G","G"), 64, 2)
codons <- ""
result <- ""
len_rnastr <- nchar(translate_rnastr)     #length of sample dataset
num_of_codons <- len_rnastr/3
#If-else for checking the length of RNA sequence
if(len_rnastr %% 3 != 0){
print("RNA sequence isn't a multiple of 3.")                 #Prints if sequence is length of sequence is not divisible by 3
} else {                                                        #Proceed here otherwise
start <- seq(from=1, by=3, len_rnastr)        #for sequencing of the rna string; increments by 3
print(start)
for(i in 1:num_of_codons){
# Get the codon from RNA Sequence
codons[i] <- substring(translate_rnastr, seq(1, len_rnastr-3+1, 3),seq(3,len_rnastr, 3))
#Get the protein that corresponds to the codon
result[i] <- rna_codon_table[rna_codon_table[,1] == codons[[i]] , 2]
#If it is a STOP codon, do not print
if (result[i] == "STOP"){
break
}
protein_str <- c(paste(result, collapse=""))
}
#Print protein string
print(protein_str)
}
translate_rnastr <- c("AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA")
#RNA Codon Table [64:2]
rna_codon_table <- matrix(
c("UUU","UUC","UUA","UUG","CUU","CUC","CUA","CUG","AUU","AUC","AUA","AUG","GUU","GUC","GUA","GUG",
"UCU","UCC","UCA","UCG","CCU","CCC","CCA","CCG","ACU","ACC","ACA","ACG","GCU","GCC","GCA","GCG",
"UAU","UAC","UAA","UAG","CAU","CAC","CAA","CAG","AAU","AAC","AAA","AAG","GAU","GAC","GAA","GAG",
"UGU","UGC","UGA","UGG","CGU","CGC","CGA","CGG","AGU","AGC","AGA","AGG","GGU","GGC","GGA","GGG",
"F","F","L","L","L","L","L","L","I","I","I","M","V","V","V","V",
"S","S","S","S","P","P","P","P","T","T","T","T","A","A","A","A",
"Y","Y","STOP","STOP","H","H","Q","Q","N","N","K","K","D","D","E","E",
"C","C","STOP","W","R","R","R","R","S","S","R","R","G","G","G","G"), 64, 2)
codons <- ""
result <- ""
len_rnastr <- nchar(translate_rnastr)     #length of sample dataset
num_of_codons <- len_rnastr/3
#If-else for checking the length of RNA sequence
if(len_rnastr %% 3 != 0){
print("RNA sequence isn't a multiple of 3.")                 #Prints if sequence is length of sequence is not divisible by 3
} else {                                                        #Proceed here otherwise
start <- seq(from=1, by=3, len_rnastr)        #for sequencing of the rna string; increments by 3
print(start)
for(i in 1:num_of_codons){
# Get the codon from RNA Sequence
codons[i] <- substring(translate_rnastr, seq(1, len_rnastr-3+i, 3),seq(3,len_rnastr, 3))
#Get the protein that corresponds to the codon
result[i] <- rna_codon_table[rna_codon_table[,1] == codons[[i]] , 2]
#If it is a STOP codon, do not print
if (result[i] == "STOP"){
break
}
protein_str <- c(paste(result, collapse=""))
}
#Print protein string
print(protein_str)
}
translate_rnastr <- c("AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA")
#RNA Codon Table [64:2]
rna_codon_table <- matrix(
c("UUU","UUC","UUA","UUG","CUU","CUC","CUA","CUG","AUU","AUC","AUA","AUG","GUU","GUC","GUA","GUG",
"UCU","UCC","UCA","UCG","CCU","CCC","CCA","CCG","ACU","ACC","ACA","ACG","GCU","GCC","GCA","GCG",
"UAU","UAC","UAA","UAG","CAU","CAC","CAA","CAG","AAU","AAC","AAA","AAG","GAU","GAC","GAA","GAG",
"UGU","UGC","UGA","UGG","CGU","CGC","CGA","CGG","AGU","AGC","AGA","AGG","GGU","GGC","GGA","GGG",
"F","F","L","L","L","L","L","L","I","I","I","M","V","V","V","V",
"S","S","S","S","P","P","P","P","T","T","T","T","A","A","A","A",
"Y","Y","STOP","STOP","H","H","Q","Q","N","N","K","K","D","D","E","E",
"C","C","STOP","W","R","R","R","R","S","S","R","R","G","G","G","G"), 64, 2)
codons <- ""
result <- ""
len_rnastr <- nchar(translate_rnastr)     #length of sample dataset
num_of_codons <- len_rnastr/3
#If-else for checking the length of RNA sequence
if(len_rnastr %% 3 != 0){
print("RNA sequence isn't a multiple of 3.")                 #Prints if sequence is length of sequence is not divisible by 3
} else {                                                        #Proceed here otherwise
start <- seq(from=1, by=3, len_rnastr)        #for sequencing of the rna string; increments by 3
print(start)
for(i in 1:num_of_codons){
# Get the codon from RNA Sequence
codons[i] <- substring(translate_rnastr, seq(1, nchar(translate_rnastr)-3+1, 3),seq(3,nchar(translate_rnastr), 3))
#Get the protein that corresponds to the codon
result[i] <- rna_codon_table[rna_codon_table[,1] == codons[[i]] , 2]
#If it is a STOP codon, do not print
if (result[i] == "STOP"){
break
}
protein_str <- c(paste(result, collapse=""))
}
#Print protein string
print(protein_str)
}
translate_rnastr <- c("AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA")
#RNA Codon Table [64:2]
rna_codon_table <- matrix(
c("UUU","UUC","UUA","UUG","CUU","CUC","CUA","CUG","AUU","AUC","AUA","AUG","GUU","GUC","GUA","GUG",
"UCU","UCC","UCA","UCG","CCU","CCC","CCA","CCG","ACU","ACC","ACA","ACG","GCU","GCC","GCA","GCG",
"UAU","UAC","UAA","UAG","CAU","CAC","CAA","CAG","AAU","AAC","AAA","AAG","GAU","GAC","GAA","GAG",
"UGU","UGC","UGA","UGG","CGU","CGC","CGA","CGG","AGU","AGC","AGA","AGG","GGU","GGC","GGA","GGG",
"F","F","L","L","L","L","L","L","I","I","I","M","V","V","V","V",
"S","S","S","S","P","P","P","P","T","T","T","T","A","A","A","A",
"Y","Y","STOP","STOP","H","H","Q","Q","N","N","K","K","D","D","E","E",
"C","C","STOP","W","R","R","R","R","S","S","R","R","G","G","G","G"), 64, 2)
codons <- ""
result <- ""
len_rnastr <- nchar(translate_rnastr)     #length of sample dataset
num_of_codons <- len_rnastr/3
#If-else for checking the length of RNA sequence
if(len_rnastr %% 3 != 0){
print("RNA sequence isn't a multiple of 3.")                 #Prints if sequence is length of sequence is not divisible by 3
} else {                                                        #Proceed here otherwise
start <- seq(from=1, by=3, len_rnastr)        #for sequencing of the rna string; increments by 3
print(start)
for(i in 1:num_of_codons){
# Get the codon from RNA Sequence
codons[i] <- substring(translate_rnastr, start[i], start[i]+2)
#Get the protein that corresponds to the codon
result[i] <- rna_codon_table[rna_codon_table[,1] == codons[[i]] , 2]
#If it is a STOP codon, do not print
if (result[i] == "STOP"){
break
}
protein_str <- c(paste(result, collapse=""))
}
#Print protein string
print(protein_str)
}
translate_rnastr <- c("AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA")
#RNA Codon Table [64:2]
rna_codon_table <- matrix(
c("UUU","UUC","UUA","UUG","CUU","CUC","CUA","CUG","AUU","AUC","AUA","AUG","GUU","GUC","GUA","GUG",
"UCU","UCC","UCA","UCG","CCU","CCC","CCA","CCG","ACU","ACC","ACA","ACG","GCU","GCC","GCA","GCG",
"UAU","UAC","UAA","UAG","CAU","CAC","CAA","CAG","AAU","AAC","AAA","AAG","GAU","GAC","GAA","GAG",
"UGU","UGC","UGA","UGG","CGU","CGC","CGA","CGG","AGU","AGC","AGA","AGG","GGU","GGC","GGA","GGG",
"F","F","L","L","L","L","L","L","I","I","I","M","V","V","V","V",
"S","S","S","S","P","P","P","P","T","T","T","T","A","A","A","A",
"Y","Y","STOP","STOP","H","H","Q","Q","N","N","K","K","D","D","E","E",
"C","C","STOP","W","R","R","R","R","S","S","R","R","G","G","G","G"), 64, 2)
codons <- ""
result <- ""
len_rnastr <- nchar(translate_rnastr)     #length of sample dataset
num_of_codons <- len_rnastr/3
#If-else for checking the length of RNA sequence
if(len_rnastr %% 3 != 0){
print("RNA sequence isn't a multiple of 3.")                #Prints if sequence is length of sequence is not divisible by 3
} else {                                                      #Proceed here otherwise
start <- seq(from=1, by=3, len_rnastr)                      #for sequencing of the rna string; increments by 3
print(start)
for(i in 1:num_of_codons){
# Get the codon from RNA Sequence
codons[i] <- substr(translate_rnastr, start[i], start[i]+2)
#Get the protein that corresponds to the codon
result[i] <- rna_codon_table[rna_codon_table[,1] == codons[[i]] , 2]
#If it is a STOP codon, do not print
if (result[i] == "STOP"){
break
}
protein_str <- c(paste(result, collapse=""))
}
#Print protein string
print(protein_str)
}
translate_rnastr <- c("AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA")
#RNA Codon Table [64:2]
rna_codon_table <- matrix(
c("UUU","UUC","UUA","UUG","CUU","CUC","CUA","CUG","AUU","AUC","AUA","AUG","GUU","GUC","GUA","GUG",
"UCU","UCC","UCA","UCG","CCU","CCC","CCA","CCG","ACU","ACC","ACA","ACG","GCU","GCC","GCA","GCG",
"UAU","UAC","UAA","UAG","CAU","CAC","CAA","CAG","AAU","AAC","AAA","AAG","GAU","GAC","GAA","GAG",
"UGU","UGC","UGA","UGG","CGU","CGC","CGA","CGG","AGU","AGC","AGA","AGG","GGU","GGC","GGA","GGG",
"F","F","L","L","L","L","L","L","I","I","I","M","V","V","V","V",
"S","S","S","S","P","P","P","P","T","T","T","T","A","A","A","A",
"Y","Y","STOP","STOP","H","H","Q","Q","N","N","K","K","D","D","E","E",
"C","C","STOP","W","R","R","R","R","S","S","R","R","G","G","G","G"), 64, 2)
codons <- ""
result <- ""
len_rnastr <- nchar(translate_rnastr)     #length of sample dataset
num_of_codons <- len_rnastr/3
#If-else for checking the length of RNA sequence
if(len_rnastr %% 3 != 0){
print("RNA sequence isn't a multiple of 3.")                #Prints if sequence is length of sequence is not divisible by 3
} else {                                                      #Proceed here otherwise
start <- seq(from=1, by=3, len_rnastr)                      #for identifying index of codons
print(start)
for(i in 1:num_of_codons){
# Get the codon from RNA Sequence
codons[i] <- substr(translate_rnastr, start[i], start[i]+2)
#Get the protein that corresponds to the codon
result[i] <- rna_codon_table[rna_codon_table[,1] == codons[[i]] , 2]
#If it is a STOP codon, do not print
if (result[i] == "STOP"){
break
}
protein_str <- c(paste(result, collapse=""))
}
#Print protein string
print(protein_str)
}
translate_rnastr <- c("AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA")
#RNA Codon Table [64:2]
rna_codon_table <- matrix(
c("UUU","UUC","UUA","UUG","CUU","CUC","CUA","CUG","AUU","AUC","AUA","AUG","GUU","GUC","GUA","GUG",
"UCU","UCC","UCA","UCG","CCU","CCC","CCA","CCG","ACU","ACC","ACA","ACG","GCU","GCC","GCA","GCG",
"UAU","UAC","UAA","UAG","CAU","CAC","CAA","CAG","AAU","AAC","AAA","AAG","GAU","GAC","GAA","GAG",
"UGU","UGC","UGA","UGG","CGU","CGC","CGA","CGG","AGU","AGC","AGA","AGG","GGU","GGC","GGA","GGG",
"F","F","L","L","L","L","L","L","I","I","I","M","V","V","V","V",
"S","S","S","S","P","P","P","P","T","T","T","T","A","A","A","A",
"Y","Y","STOP","STOP","H","H","Q","Q","N","N","K","K","D","D","E","E",
"C","C","STOP","W","R","R","R","R","S","S","R","R","G","G","G","G"), 64, 2)
codons <- ""
result <- ""
len_rnastr <- nchar(translate_rnastr)     #length of sample dataset
num_of_codons <- len_rnastr/3
#If-else for checking the length of RNA sequence
if(len_rnastr %% 3 != 0){
print("RNA sequence isn't a multiple of 3.")                #Prints if sequence is length of sequence is not divisible by 3
} else {                                                      #Proceed here otherwise
start <- seq(from=1, by=3, len_rnastr)                      #for identifying last index of codons [eg. 1  4  7 10 13 16 19 22 25 28 31 34 37 40 43 46 49]
for(i in 1:num_of_codons){
# Get the codon from RNA Sequence
codons[i] <- substr(translate_rnastr, start[i], start[i]+2)
#Get the protein that corresponds to the codon
result[i] <- rna_codon_table[rna_codon_table[,1] == codons[[i]] , 2]
#If it is a STOP codon, do not print
if (result[i] == "STOP"){
break
}
protein_str <- c(paste(result, collapse=""))
}
#Print protein string
print(protein_str)
}
translate_rnastr <- c("AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA")
#RNA Codon Table [64:2]
rna_codon_table <- matrix(
c("UUU","UUC","UUA","UUG","CUU","CUC","CUA","CUG","AUU","AUC","AUA","AUG","GUU","GUC","GUA","GUG",
"UCU","UCC","UCA","UCG","CCU","CCC","CCA","CCG","ACU","ACC","ACA","ACG","GCU","GCC","GCA","GCG",
"UAU","UAC","UAA","UAG","CAU","CAC","CAA","CAG","AAU","AAC","AAA","AAG","GAU","GAC","GAA","GAG",
"UGU","UGC","UGA","UGG","CGU","CGC","CGA","CGG","AGU","AGC","AGA","AGG","GGU","GGC","GGA","GGG",
"F","F","L","L","L","L","L","L","I","I","I","M","V","V","V","V",
"S","S","S","S","P","P","P","P","T","T","T","T","A","A","A","A",
"Y","Y","STOP","STOP","H","H","Q","Q","N","N","K","K","D","D","E","E",
"C","C","STOP","W","R","R","R","R","S","S","R","R","G","G","G","G"), 64, 2)
codons <- ""
result <- ""
len_rnastr <- nchar(translate_rnastr)     #length of sample dataset
num_of_codons <- len_rnastr/3
#If-else for checking the length of RNA sequence
if(len_rnastr %% 3 != 0){
print("RNA sequence isn't a multiple of 3.")                #Prints if sequence is length of sequence is not divisible by 3
} else {                                                      #Proceed here otherwise
start <- seq(from=1, by=3, len_rnastr)                      #for identifying last index of codons [eg. 1  4  7 10 13 16 19 22 25 28 31 34 37 40 43 46 49]
for(i in 1:num_of_codons){
# Get the codon from RNA Sequence
codons[i] <- substr(translate_rnastr, start[i], start[i]+2)
#Get the protein that corresponds to the codon
result[i] <- rna_codon_table[rna_codon_table[,1] == codons[[i]] , 2]
#If it is a STOP codon, do not print
if (result[i] == "STOP"){
break
}
protein_str <- c(paste(result, collapse=""))
}
#Print protein string
print(protein_str)
}
require(stringr)
#Sample Dataset
transcribe_dnastr <- c("GATGGAACTTGACTACGTAAATT")
#replacing all occurences of "T" with "U", as T is not contained in RNA
print(str_replace_all(transcribe_dnastr,"T", "U"))
#Sample Dataset
count_dnastr <- c("AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC")
#split the string into characters(strsplit) and count the frequencies of each nucleotides(table)
print(table(strsplit(count_dnastr,"")[[1]]))
#Sample Dataset
translate_rnastr <- c("AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA")
#RNA Codon Table [64:2]
rna_codon_table <- matrix(
c("UUU","UUC","UUA","UUG","CUU","CUC","CUA","CUG","AUU","AUC","AUA","AUG","GUU","GUC","GUA","GUG",
"UCU","UCC","UCA","UCG","CCU","CCC","CCA","CCG","ACU","ACC","ACA","ACG","GCU","GCC","GCA","GCG",
"UAU","UAC","UAA","UAG","CAU","CAC","CAA","CAG","AAU","AAC","AAA","AAG","GAU","GAC","GAA","GAG",
"UGU","UGC","UGA","UGG","CGU","CGC","CGA","CGG","AGU","AGC","AGA","AGG","GGU","GGC","GGA","GGG",
"F","F","L","L","L","L","L","L","I","I","I","M","V","V","V","V",
"S","S","S","S","P","P","P","P","T","T","T","T","A","A","A","A",
"Y","Y","STOP","STOP","H","H","Q","Q","N","N","K","K","D","D","E","E",
"C","C","STOP","W","R","R","R","R","S","S","R","R","G","G","G","G"), 64, 2)
codons <- ""
result <- ""
len_rnastr <- nchar(translate_rnastr)     #length of sample dataset
num_of_codons <- len_rnastr/3
#If-else for checking the length of RNA sequence
if(len_rnastr %% 3 != 0){
print("RNA sequence isn't a multiple of 3.")                #Prints if sequence is length of sequence is not divisible by 3
} else {                                                      #Proceed here otherwise
start <- seq(from=1, by=3, len_rnastr)                      #for identifying last index of codons [eg. 1  4  7 10 13 16 19 22 25 28 31 34 37 40 43 46 49]
for(i in 1:num_of_codons){
# Get the codon from RNA Sequence
codons[i] <- substr(translate_rnastr, start[i], start[i]+2)
#Get the protein that corresponds to the codon
result[i] <- rna_codon_table[rna_codon_table[,1] == codons[[i]] , 2]
#If it is a STOP codon, do not print
if (result[i] == "STOP"){
break
}
protein_str <- c(paste(result, collapse=""))
}
#Print protein string
print(protein_str)
}
getwd()
cd
cd ..
dataset_url <-
"http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
ls
ls()
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
length(andy$Day)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight"]
andy[30, "Weight"]
andy[which(andy$Day == 30), "Weight"]
andy[which(andy[,"Day"] == 30), "Weight"]
subset(andy$Weight, andy$Day==30)
andy_start <- andy[1, "Weight"]
andy_end <- andy[30, "Weight"]
andy_loss <- andy_start - andy_end
andy_loss
files <- list.files("diet_data")
files
files[1]
files[2]
files[3:5]
head(read.csv(files[3]))
files_full <- list.files("diet_data", full.names=TRUE)
files_full
head(read.csv(files_full[3]))
andy_david <- rbind(andy, read.csv(files_full[2]))
head(andy_david)
tail(andy_david)
day_25 <- andy_david[which(andy_david$Day == 25), ]
day_25
for (I in 1:5) {print(i)}
for (i in 1:5) {print(i)}
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
for (i in 1:5) {
dat2 <- data.frame()
dat2 <- rbind(dat2, read.csv(files_full[i]))
}
str(dat2)
head(dat2)
median(dat$Weight)
dat
median(dat$Weight, na.rm=TRUE)
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
median(dat_30$Weight)
weightmedian <- function(directory, day) {
files_list <- list.files(directory, full.names=TRUE) #creates a list of files
dat <- data.frame() #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),] #subsets the rows that match the
#'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE) #identifies the median weight
#while stripping out the NAs
}
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data", 4)
weightmedian("diet_data", 17)
summary(files_full)
tmp <- vector(mode = "list", length = length(files_full))
summary(tmp)
for (i in seq_along(files_full)) {
tmp[[i]] <- read.csv(files_full[[i]])
}
str(tmp)
str(lapply(files_full, read.csv))
str(tmp[[1]])
head(tmp[[1]][,"Day"])
output <- do.call(rbind, tmp)
str(output)
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
False & FALSE
FALSE & FALSE
TRUE & c(TRUE, FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6!= 8 && 4
5>8 || 6!= 8 && 4 >3.9
isTRUE(6>4)
isentical('twins', twins)
identical('twins', twins)
identical('twins', 'twins')
xor(5 == 6, !FALSE )
ints <- sample(10)
ints
ints > 5
which( ints > 7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function()
boring_function
submit
()
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder((11,5))
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(median, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[0], c(8,4,0)})
evaluate(function(x){x[0]}, c(8,4,0))
info()
submit()
evaluate(function(x){which x == 0}, c(8,4,0))
bye()
source("FirstMiniProj.R")
setwd("C:/Users/HP/Desktop/4th Year 1st Sem/CMSC197 [Intro to Data Science]/First Mini Project")
source("FirstMiniProj.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantMean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantMean("specdata", "sulfate", 1:10)
View(pollutantmean)
View(pollutantmean)
pollutantmean()
pollutantmean("specdata", "sulfate", 1:10)
